üìö TiendaLibros

Aplicaci√≥n de escritorio desarrollada con **Spring Boot**, **Swing** y **MySQL**, dise√±ada para gestionar libros en el almac√©n de una tienda. Este proyecto consolida mis conocimientos en arquitectura por capas, persistencia con JPA y desarrollo de interfaces gr√°ficas en Java.

---

### üìñ Descripci√≥n

Sistema que permite realizar operaciones CRUD (crear, leer, actualizar, eliminar) sobre libros almacenados en una base de datos. Cada libro contiene atributos como **nombre**, **autor**, **precio** y **existencias**. La aplicaci√≥n cuenta con una interfaz de escritorio (Swing) conectada al backend desarrollado en Spring Boot.

Una funcionalidad destacada es la **reutilizaci√≥n autom√°tica de IDs eliminados**, lo que evita que los identificadores se incrementen indefinidamente, mejorando la organizaci√≥n del almac√©n.

---

### üöÄ Tecnolog√≠as Utilizadas

- Java 17+
- Spring Boot 3.x
- Spring Data JPA
- Swing (GUI en Java)
- MySQL
- Maven (gesti√≥n de dependencias y construcci√≥n)

---

### üéØ Objetivos de Aprendizaje

- Implementar una arquitectura por capas: `Controller`, `Service`, `Repository`.
- Integrar una interfaz gr√°fica en Swing con un backend Spring Boot.
- Utilizar Spring Data JPA para la persistencia y l√≥gica de acceso a datos.
- Gestionar correctamente la configuraci√≥n y conexi√≥n con MySQL.
- Aplicar buenas pr√°cticas en el desarrollo de aplicaciones Java de escritorio.

---

### üß© Funcionalidades Clave

- **Listar libros:** Ver todos los libros en inventario.
- **Agregar libro:** Inserta un nuevo libro reutilizando el ID m√°s bajo disponible.
- **Editar libro:** Modifica los datos de un libro existente.
- **Eliminar libro:** Elimina un libro del sistema y libera su ID.
- **Reutilizaci√≥n de IDs:** Algoritmo inteligente para insertar nuevos libros con el menor ID libre.

---

### ‚öôÔ∏è Configuraci√≥n & Ejecuci√≥n

**1. Configura la base de datos MySQL:**

Crea la base de datos `tienda_libros`:

```sql
CREATE DATABASE tienda_libros;

2. Configura application.properties:

Ubicado en src/main/resources/application.properties:

spring.datasource.url=jdbc:mysql://localhost:3306/tienda_libros
spring.datasource.username=tu_usuario
spring.datasource.password=tu_contrase√±a

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

3. Ejecuta la aplicaci√≥n:

Desde terminal:

mvn spring-boot:run

O desde tu IDE preferido.

4. Usa la interfaz gr√°fica:

La interfaz Swing se abrir√° autom√°ticamente y te permitir√° gestionar el inventario de libros.
üì∏ Capturas (pr√≥ximamente)

Subir√© capturas de pantalla mostrando la interfaz Swing, formularios y funcionamiento de las operaciones CRUD.
üß† Sobre el Autor

Este proyecto forma parte de mi portafolio como desarrollador Java, realizado durante mis estudios en CFGS DAM. Puedes ver m√°s proyectos como este en mi perfil:

    GitHub: @ecalar

    Email: enriquecalar@gmail.com

‚öôÔ∏è Estado del Proyecto

‚úÖ Funcional y estable ‚Äî abierto a mejoras como validaci√≥n de formularios, autenticaci√≥n b√°sica, exportaci√≥n a PDF, internacionalizaci√≥n (i18n) o integraci√≥n con una API REST externa.
üì© Contacto

Mas prtectos:

    GitHub: @ecalar

    Email: enriquecalar@gmail.com